#version 460

struct light_t
{
    vec3 pos;
    vec3 color;
};

struct encoded_t
{
    uint code;
    uint id;
};

struct node_t
{
    vec3 bbox_min;
    float intensity;
    vec3 bbox_max;
    uint id;
};


layout(std430, set = 0, binding = 0) readonly buffer lights_buffer
{
    light_t lights[];
};

layout(std430, set = 0, binding = 1) readonly buffer encoded_buffer
{
    encoded_t encoded_lights[];
};

layout(std430, set = 0, binding = 2) writeonly buffer tree_buffer
{
    node_t nodes[];
};

layout(push_constant) uniform constants
{
    uint level;
    uint total_nodes; // amount of nodes in the level
    uint start_id;
    uint merge_count;
};

layout(local_size_x = 512, local_size_y = 1, local_size_z = 1) in;
void main()
{
    if (gl_GlobalInvocationID.x < total_nodes - 1)
    {
        uint idx = gl_GlobalInvocationID.x + start_id;
        nodes[idx].id = idx;
   
        uint merge_start_id = gl_GlobalInvocationID.x * merge_count;
        uint merge_end_id = merge_start_id + merge_count;
        for(uint i = merge_start_id; i < merge_end_id; i++)
        {
            light_t light = lights[encoded_lights[i].id];
            if (light.color != vec3(0))
            {
                nodes[idx].intensity += 1.0;
                // todo bboxes
            }
        }
    }
}
