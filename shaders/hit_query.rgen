#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require

#define GLSL
#include "../src/shader_data.h"
#include "common.inc"

layout(set = 0, binding = 0) uniform camera_ubo 
{
    camera_ubo_t camera;
};
layout(set = 1, binding = 0) uniform accelerationStructureEXT tlas;

struct payload_t 
{
    vec3 hit_pos;
    bool hit;
};

layout(location = 0) rayPayloadEXT payload_t payload;

layout(std430, set = 2, binding = 0) writeonly buffer lines_info
{
    query_output_t query_output;
};

layout(push_constant) uniform constants
{
    vec2 screen_uv;
    vec2 extent;
    bool is_ortho; // 4bytes
};

void main()
{
    const vec2 pixel = screen_uv + vec2(0.5);
    const vec2 d = (pixel/extent) * 2.0 - 1.0;

    vec3 origin = camera.pos;
    vec4 target = camera.inv_proj * vec4(d.x, d.y, 1, 1);
    vec4 direction = camera.inv_view * vec4(normalize(target.xyz), 0);

    if (is_ortho)
    {
        origin = camera.pos + (camera.inv_view * camera.inv_proj * vec4(d.x, d.y, 0, 0)).xyz;
        direction = -camera.inv_view[2];
    }

    traceRayEXT(tlas,
        gl_RayFlagsOpaqueEXT, 
        0xff, 
        0,  // sbt offset
        0,  // sbt stride
        0,  // miss index
        origin, 
        0.001,
        direction.xyz, 
        10000.0, 
        0
    );

    query_output.hit_pos = payload.hit_pos;
    query_output.hit     = payload.hit;
}
