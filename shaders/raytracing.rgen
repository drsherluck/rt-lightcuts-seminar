#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require

#define NUM_SAMPLES 1

#define GLSL
#include "../src/shader_data.h"
#include "common.inc"

layout(set = 0, binding = 0) uniform camera_ubo 
{
    camera_ubo_t camera;
};
layout(set = 1, binding = 0) uniform accelerationStructureEXT tlas;
layout(set = 1, binding = 2, rgba32f) uniform image2D img;

struct payload_t
{
    int sample_id;
    float seed;
    vec4 color;
    bool hit;
};
layout(location = 0) rayPayloadEXT payload_t payload;

layout(push_constant) uniform constants
{
    int num_nodes;
    int num_leaf_nodes;
    float time;
    uint num_samples;
    uint user_cut_size;
    bool is_ortho; // 4 bytes
};

void main()
{
    const vec2 pixel = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 d = (pixel/gl_LaunchSizeEXT.xy) * 2.0 - 1.0;

    vec3 origin = camera.pos;
    vec4 target = camera.inv_proj * vec4(d.x, d.y, 1, 1);
    vec4 direction = camera.inv_view * vec4(normalize(target.xyz), 0);

    if (is_ortho)
    {
        origin = camera.pos + (camera.inv_view * camera.inv_proj * vec4(d.x, d.y, 0, 0)).xyz;
        direction = -camera.inv_view[2];
    }

    vec4 px_color = vec4(0);
    payload.hit = true;
    for (int i = 0; i < num_samples; i++)
    {
        payload.sample_id = i;
        payload.seed = random(i);
        traceRayEXT(tlas,
            gl_RayFlagsOpaqueEXT, 
            0xff, 
            0,  // sbt offset
            0,  // sbt stride
            0,  // miss index
            origin, 
            0.001,
            direction.xyz, 
            10000.0, 
            0
        );
        
        px_color += payload.color/num_samples;
        if (!payload.hit) break;
    }

    imageStore(img, ivec2(gl_LaunchIDEXT.xy), px_color);
}
