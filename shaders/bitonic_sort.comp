#version 460
#extension GL_GOOGLE_include_directive : enable

#define GLSL
#include "../src/shader_data.h"

layout(set = 0, binding = 0) buffer lights_buffer
{
    encoded_t arr[];
};

layout(push_constant) uniform constants
{
   int j;
   int k;
   int num_lights;
   int total_nodes;
};

void swap_elements(inout uint a, inout uint b)
{
    encoded_t temp = arr[a];
    arr[a] = arr[b];
    arr[b] = temp;
};

layout(local_size_x = 512, local_size_y = 1, local_size_z = 1) in;
void main()
{
    uint i = gl_GlobalInvocationID.x; 
    uint l = i ^ j;

    // dummy nodes stay at the back (l < num_lights)
    if (l > i && l < num_lights)
    {
        if ((i & k) == 0)
        {
           if (arr[i].code > arr[l].code)
           {
               swap_elements(l, i);
           }
        }
        else 
        {
            if (arr[i].code < arr[l].code)
            {
                swap_elements(l, i);
            }
        }
    }
    else if (l >= num_lights && l < total_nodes)
    {
        arr[l].id = 0xffffffff;
    }
}
